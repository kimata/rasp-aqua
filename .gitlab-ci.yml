image: docker:26.1-dind

stages:
    - build-image
    - test
    - deploy
    - renovate

build-image:
    stage: build-image

    image: registry.green-rabbit.net:5000/kimata/local_ubuntu:230812D

    variables:
        BUILDER: arm_builder

    script:
        - export GIT_SSL_NO_VERIFY=1
        - git clone https://gitlab.green-rabbit.net/kimata/aqua_config.git
        - mv aqua_config/rasp-aqua.yaml config.yaml

        - docker buildx create --name ${BUILDER} --config script/buildkitd.toml --use
        - docker buildx use ${BUILDER}
        - docker buildx build --platform linux/amd64,linux/arm64/v8
          --cache-from type=registry,ref=${CI_REGISTRY_IMAGE}:cache
          --cache-to type=registry,ref=${CI_REGISTRY_IMAGE}:cache
          --push --tag ${CI_REGISTRY_IMAGE} .
        # - docker buildx stop ${BUILDER}


# test-walk-through:
#     stage: test

#     needs: ["build-react"]
#     dependencies:
#         - build-react

#     image: registry.green-rabbit.net:5000/kimata/local_ubuntu:230812D
#     script:
#         - poetry config --local virtualenvs.in-project true
#         - poetry config --local cache-dir $PWD/.poetry/cache
#         - poetry install --no-interaction --with test
#         - poetry run pytest tests/test_basic.py

#     cache:
#         key: "${CI_JOB_NAME}"
#         paths:
#             - .venv
#             - .poetry

#     artifacts:
#         when: always
#         paths:
#             - tests/evidence/**

# deploy-controller:
#     stage: deploy
#     needs: ["test-controller-regular", "test-healthz-docker", "test-walk-through"]

#     image:
#         name: bitnami/kubectl:latest
#         entrypoint: [""]
#     script:
#         - kubectl config get-contexts
#         - kubectl config use-context kimata/outdoor_unit_cooler:pod-rollout
#         - kubectl --insecure-skip-tls-verify=true rollout restart -n hems deployment unit-cooler-controller
#     rules:
#         # NOTE: 自動実行ではデプロイしない
#         - if: '$CI_PIPELINE_SOURCE == "schedule"'
#           when: never
#         - changes:
#               - app/cooler_controller.py
#               - lib/aircon.py
#               - lib/config.py
#               - lib/control.py
#               - lib/control_config.py
#               - lib/valve_state.py
#               - lib/control_pubsub.py
#               - lib/logger.py
#               - lib/notify_slack.py
#               - lib/sensor_data.py
#               - src/healthz.py

# deploy-actuator:
#     stage: deploy
#     needs: ["test-actuator-regular", "test-healthz-docker", "test-walk-through"]

#     image:
#         name: bitnami/kubectl:latest
#         entrypoint: [""]
#     script:
#         - kubectl config get-contexts
#         - kubectl config use-context kimata/outdoor_unit_cooler:pod-rollout
#         - kubectl --insecure-skip-tls-verify=true rollout restart -n hems deployment unit-cooler-actuator
#     rules:
#         # NOTE: 自動実行ではデプロイしない
#         - if: '$CI_PIPELINE_SOURCE == "schedule"'
#           when: never
#         - changes:
#               - app/unit_cooler.py
#               - lib/aircon.py
#               - lib/config.py
#               - lib/control.py
#               - lib/control_config.py
#               - lib/control_pubsub.py
#               - lib/fd_q10c.py
#               - lib/io_link.py
#               - lib/logger.py
#               - lib/ltc2874.py
#               - lib/notify_slack.py
#               - lib/sensor_data.py
#               - lib/valve.py
#               - lib/valve_state.py
#               - lib/webapp_config.py
#               - lib/webapp_base.py
#               - lib/webapp_log.py
#               - lib/webapp_event.py
#               - lib/flask_util.py
#               - lib/work_log.py
#               - src/healthz.py

# deploy-webapp:
#     stage: deploy

#     needs: ["test-webapp-docker", "test-healthz-docker", "test-walk-through"]

#     image:
#         name: bitnami/kubectl:latest
#         entrypoint: [""]
#     script:
#         - kubectl config get-contexts
#         - kubectl config use-context kimata/outdoor_unit_cooler:pod-rollout
#         - kubectl --insecure-skip-tls-verify=true rollout restart -n hems deployment unit-cooler-webapp
#     rules:
#         # NOTE: 自動実行ではデプロイしない
#         - if: '$CI_PIPELINE_SOURCE == "schedule"'
#           when: never
#         - changes:
#               - react/**/*
#               - app/webapp.py
#               - lib/*

# deploy-webapp-demo:
#     stage: deploy

#     needs: ["test-webapp-docker", "test-healthz-docker", "test-walk-through"]

#     image:
#         name: bitnami/kubectl:latest
#         entrypoint: [""]
#     script:
#         - kubectl config get-contexts
#         - kubectl config use-context kimata/outdoor_unit_cooler:pod-rollout
#         - kubectl --insecure-skip-tls-verify=true rollout restart -n hems deployment unit-cooler-webapp-demo
#     rules:
#         # NOTE: 自動実行ではデプロイしない
#         - if: '$CI_PIPELINE_SOURCE == "schedule"'
#           when: never
#         - changes:
#               - react/**/*
#               - app/webapp.py
#               - lib/*

renovate:
    stage: renovate
    image:
        name: registry.green-rabbit.net:5000/kimata/local_renovate:36

        entrypoint: [""]
    script:
        - renovate --platform gitlab --token ${RENOVATE_TOKEN} --endpoint ${CI_SERVER_URL}/api/v4 ${CI_PROJECT_PATH}
        # # NOTE: ついでにお掃除
        #  - docker rm $(docker ps -a --filter "status=exited" -q) || true
    rules:
        - if: '$CI_COMMIT_BRANCH == "master"'
        - if: '$CI_PIPELINE_SOURCE == "schedule"'
        - changes:
              - renovate.json
